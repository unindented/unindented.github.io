{"version":3,"sources":["__generated__/AppRepositoryNameQuery.graphql.js","fetchGraphQL.js","RelayEnvironment.js","App.js","serviceWorker.js","index.js"],"names":["node","v0","v1","hash","module","exports","query","variables","a","fetch","method","headers","body","JSON","stringify","response","json","fetchGraphQL","params","text","Environment","network","Network","create","store","Store","RecordSource","Suspense","React","RepositoryNameQuery","preloadedQuery","preloadQuery","RelayEnvironment","App","props","data","usePreloadedQuery","className","repository","name","AppRoot","environment","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oIAgCA,IAAMA,EAA6B,WACnC,IAAIC,EAAK,CACP,CACE,KAAQ,UACR,KAAQ,OACR,MAAS,SAEX,CACE,KAAQ,UACR,KAAQ,QACR,MAAS,aAGbC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,yBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASD,EACT,aAAgB,aAChB,KAAQ,cACR,KAAQ,aACR,QAAU,EACV,WAAc,CACXC,GAEH,WAAc,8CAGlB,KAAQ,SAEV,KAAQ,UACR,UAAa,CACX,oBAAuB,GACvB,KAAQ,YACR,KAAQ,yBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASD,EACT,aAAgB,aAChB,KAAQ,cACR,KAAQ,aACR,QAAU,EACV,WAAc,CACXC,EACD,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,OAGlB,WAAc,+CAIpB,OAAU,CACR,GAAM,KACN,SAAY,GACZ,KAAQ,yBACR,cAAiB,QACjB,KAAQ,iHA1EuB,GA+ElCF,EAAeG,KAAO,mCAEvBC,EAAOC,QAAUL,G,+KCjHjB,WAA4BM,EAAOC,GAAnC,eAAAC,EAAA,sEACyBC,MAAM,wCAAyC,CACpEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBR,QACAC,gBARN,cACQQ,EADR,gBAYeA,EAASC,OAZxB,oF,sBAeeC,M,0FCZf,WAA0BC,EAAQX,GAAlC,SAAAC,EAAA,+EACSS,EAAaC,EAAOC,KAAMZ,IADnC,4C,sBAIe,I,EAAA,MAAIa,cAAY,CAC7BC,QAASC,UAAQC,Q,gDACjBC,MAAO,IAAIC,QAAM,IAAIC,kBCCfC,EAAaC,IAAbD,SAGFE,OAAmB,iBAUnBC,EAAiBC,uBAAaC,EAAkBH,EAAqB,IAW3E,SAASI,EAAIC,GACX,IAAMC,EAAOC,4BAAkBP,EAAqBK,EAAMJ,gBAE1D,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,2BAAIF,EAAKG,WAAWC,QAqBbC,MAVf,SAAiBN,GACf,OACE,kBAAC,2BAAD,CAA0BO,YAAaT,GACrC,kBAACL,EAAD,CAAUe,SAAU,cAClB,kBAAC,EAAD,CAAKZ,eAAgBA,OC3CTa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ee57dae8.chunk.js","sourcesContent":["/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type AppRepositoryNameQueryVariables = {||};\nexport type AppRepositoryNameQueryResponse = {|\n  +repository: ?{|\n    +name: string\n  |}\n|};\nexport type AppRepositoryNameQuery = {|\n  variables: AppRepositoryNameQueryVariables,\n  response: AppRepositoryNameQueryResponse,\n|};\n*/\n\n\n/*\nquery AppRepositoryNameQuery {\n  repository(owner: \"facebook\", name: \"relay\") {\n    name\n    id\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"name\",\n    \"value\": \"relay\"\n  },\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"owner\",\n    \"value\": \"facebook\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AppRepositoryNameQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v0/*: any*/),\n        \"concreteType\": \"Repository\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"repository\",\n        \"plural\": false,\n        \"selections\": [\n          (v1/*: any*/)\n        ],\n        \"storageKey\": \"repository(name:\\\"relay\\\",owner:\\\"facebook\\\")\"\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"AppRepositoryNameQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v0/*: any*/),\n        \"concreteType\": \"Repository\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"repository\",\n        \"plural\": false,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": \"repository(name:\\\"relay\\\",owner:\\\"facebook\\\")\"\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AppRepositoryNameQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AppRepositoryNameQuery {\\n  repository(owner: \\\"facebook\\\", name: \\\"relay\\\") {\\n    name\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '9f041295559a43de4cee97435d379fd0';\n\nmodule.exports = node;\n","async function fetchGraphQL(query, variables) {\n  const response = await fetch(\"https://github.unindented.org/graphql\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  });\n\n  return await response.json();\n}\n\nexport default fetchGraphQL;\n","import { Environment, Network, RecordSource, Store } from \"relay-runtime\";\nimport fetchGraphQL from \"./fetchGraphQL\";\n\nasync function fetchRelay(params, variables) {\n  return fetchGraphQL(params.text, variables);\n}\n\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport {\n  RelayEnvironmentProvider,\n  preloadQuery,\n  usePreloadedQuery,\n} from \"react-relay/hooks\";\nimport RelayEnvironment from \"./RelayEnvironment\";\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = preloadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`.\n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React is isn't\n//   ready to render yet). This will show the nearest <Suspense> fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={\"Loading...\"}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}